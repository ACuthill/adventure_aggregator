# adventure_aggregator/schemas.py

from pydantic import BaseModel, ConfigDict
from datetime import datetime
from typing import Optional

# This model represents the core data from your scraper
class AdventureBase(BaseModel):
    unique_id: str
    provider_name: str
    trip_name: str
    url: str
    image_url: Optional[str] = None
    price: float
    currency: str
    departure_date: datetime
    duration: Optional[int] = None
    location: Optional[str] = None
    activity_type: str

# This is the model that the API will accept for creating/updating an adventure
class AdventureCreate(AdventureBase):
    pass

# This is the full model that will be returned by the API,
# including fields generated by the database.
class Adventure(AdventureBase):
    created_at: datetime
    updated_at: datetime

    # This configuration helps Pydantic work with database objects
    model_config = ConfigDict(from_attributes=True)